# Copyright 2014 The Closure Compiler Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This file contains example JS conformance configurations for various problems
# with JavaScript. Since each project may want to opt-in to different rules, and
# each project may need its own specific whitelist, the examples in this file
# are meant to be copied to a project specific conformance_proto.textproto file.

requirement: {
  type: BANNED_NAME
  error_message: 'eval is not allowed'

  value: 'eval'

  whitelist: 'javascript/closure/base.js'
  whitelist: 'javascript/closure/json/json.js'
}

requirement: {
  rule_id: 'closure:stringFunctionDefinition'
  type: RESTRICTED_NAME_CALL

  value: 'Function:function()'
  value: 'setTimeout:function(string, ...?)'
  value: 'setImmediate:function(string, ...?)'
  value: 'setInterval:function(string, ...?)'
  value: 'requestAnimationFrame:function(string, ...?)'

  error_message: 'Function, setTimeout, setInterval and requestAnimationFrame are not allowed with string argument. See ...'
}

requirement: {
  rule_id: 'closure:windowStringFunctionDefinition'
  type: RESTRICTED_METHOD_CALL

  value: 'Window.prototype.setTimeout:function(string, ...?)'
  value: 'Window.prototype.setImmediate:function(string, ...?)'
  value: 'Window.prototype.setInterval:function(string, ...?)'
  value: 'Window.prototype.requestAnimationFrame:function(string, ...?)'

  error_message: 'window.setTimeout, setInterval and requestAnimationFrame are not allowed with string argument. See ...'
}

requirement: {
  type: BANNED_PROPERTY
  error_message: 'Arguments.prototype.callee'

  value: 'Arguments.prototype.callee'

  whitelist: 'javascript/closure/base.js'  # goog.base uses arguments.callee
  whitelist: 'javascript/closure/debug/'  # legacy stack trace support, etc
}

requirement: {
  type: BANNED_PROPERTY_WRITE
  error_message: 'Assignment to Element.prototype.innerHTML is not allowed'

  value: 'Object.innerHTML'

  # Safe wrapper for this property.
  whitelist: 'javascript/closure/dom/safe.js'

  # Safely used in goog.string.unescapeEntitiesUsingDom_; the string assigned to
  # innerHTML is a single HTML entity.
  whitelist: 'javascript/closure/string/string.js'
}

requirement: {
  type: BANNED_PROPERTY_WRITE
  error_message: 'Assignment to Element.prototype.outerHTML is not allowed'

  value: 'Object.outerHTML'

  # Safe wrapper for this property.
  whitelist: 'javascript/closure/dom/safe.js'
}

requirement: {
  type: BANNED_PROPERTY_WRITE
  error_message: 'Assignment to Location.prototype.href is not allowed'

  value: 'Location.prototype.href'

  # Safe wrapper for this property.
  whitelist: 'javascript/closure/dom/safe.js'
}

requirement: {
  type: BANNED_PROPERTY_WRITE
  error_message: 'Assignment to location is not allowed'

  value: 'Window.prototype.location'
}

requirement: {
  type: BANNED_PROPERTY_WRITE
  error_message: 'Assignment to .href property or src'

  # Types with .href properties that do not extend from Element.
#  value: 'StyleSheet.prototype.href'
#  value: 'CSSImportRule.prototype.href'

  # All other types extend from Element.
#  value: 'Element.prototype.href'
  value: 'Object.href'
  value: 'Object.src'

  # Safe wrapper for this property.
  whitelist: 'javascript/closure/dom/safe.js'
}

requirement: {
  rule_id: 'setAttribute URL'
  type: BANNED_CODE_PATTERN
  error_message: 'Assigning a value to a dangerous property via setAttribute is forbidden'
  value:
      '/**\n'
      ' * @param {*} element\n'
      ' * @param {?} value\n'
      ' */\n'
      'function template(element, value) {'
      '  element.setAttribute(\'src\', value);'
      '}'
  value:
      '/**\n'
      ' * @param {*} element\n'
      ' * @param {?} value\n'
      ' */\n'
      'function template(element, value) {\n'
      '  element.setAttribute(\'href\', value);\n'
      '}'
}

requirement: {
  type: BANNED_PROPERTY_WRITE
  error_message: 'Use of document.domain is not allowed'

  value: 'Document.prototype.domain'
}
